<?php

namespace FontAwesome\Migrator\Commands;

use Exception;
use FontAwesome\Migrator\Commands\Traits\ConfigurationHelpers;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\File;

use function Laravel\Prompts\confirm;
use function Laravel\Prompts\error;
use function Laravel\Prompts\info;
use function Laravel\Prompts\intro;
use function Laravel\Prompts\note;
use function Laravel\Prompts\outro;
use function Laravel\Prompts\select;
use function Laravel\Prompts\spin;
use function Laravel\Prompts\warning;

class InstallFontAwesomeCommand extends Command
{
    use ConfigurationHelpers;

    /**
     * The name and signature of the console command.
     */
    protected $signature = 'fontawesome:install
                            {--force : Forcer la r√©√©criture des fichiers existants}
                            {--non-interactive : Mode non-interactif pour les tests}';

    /**
     * The console command description.
     */
    protected $description = 'Installation interactive du package FontAwesome Migrator';

    /**
     * Execute the console command.
     */
    public function handle(): int
    {
        $this->displayWelcome();

        // √âtape 1: Publier la configuration
        $this->step('Publication de la configuration', function (): void {
            $this->publishConfiguration();
        });

        // √âtape 2: Configurer le package
        $this->step('Configuration du package', function (): void {
            $this->configurePackage();
        });

        // √âtape 3: Cr√©er le lien symbolique storage
        $this->step('Configuration des rapports web', function (): void {
            $this->setupStorage();
        });

        // √âtape 4: V√©rifier l'installation
        $this->step('V√©rification de l\'installation', function (): void {
            $this->verifyInstallation();
        });

        $this->displayCompletion();

        return Command::SUCCESS;
    }

    /**
     * Afficher l'√©cran de bienvenue
     */
    protected function displayWelcome(): void
    {
        intro('üöÄ FontAwesome Migrator - Installation Interactive');

        note(
            "Migration automatique Font Awesome 5 ‚Üí 6\n".
            'Support Free & Pro ‚Ä¢ Assets & Ic√¥nes ‚Ä¢ Interface Web'
        );
    }

    /**
     * Publier la configuration
     */
    protected function publishConfiguration(): void
    {
        $configExists = File::exists(config_path('fontawesome-migrator.php'));

        if ($configExists && ! $this->option('force') && ! $this->option('non-interactive')) {
            $replace = confirm('Le fichier de configuration existe d√©j√†. Le remplacer ?', false);

            if (! $replace) {
                info('Configuration existante conserv√©e');

                return;
            }
        }

        // Copier le fichier stub au lieu du fichier complet
        $stubPath = __DIR__.'/../../config/fontawesome-migrator.stub';
        $configPath = config_path('fontawesome-migrator.php');

        if (File::exists($stubPath)) {
            File::copy($stubPath, $configPath);
            info('‚úÖ Configuration initialis√©e dans config/fontawesome-migrator.php');
        } else {
            // Fallback vers la m√©thode classique si le stub n'existe pas
            Artisan::call('vendor:publish', [
                '--tag' => 'fontawesome-migrator-config',
                '--force' => $this->option('force') || $configExists,
            ]);
            info('‚úÖ Configuration publi√©e dans config/fontawesome-migrator.php');
        }
    }

    /**
     * Configurer le package de mani√®re interactive
     */
    protected function configurePackage(): void
    {
        info('üìù Configuration du package...');

        // Mode non-interactif pour les tests
        if ($this->option('non-interactive')) {
            $licenseType = 'free';
            $customPaths = [];
            $generateReports = true;
            $enableBackups = true;

            info('‚úÖ Configuration par d√©faut appliqu√©e (mode non-interactif)');

            // En mode non-interactif, utiliser seulement les chemins personnalis√©s (vides = valeurs par d√©faut du package)
            $this->writeConfiguration($licenseType, $customPaths, $generateReports, $enableBackups, []);

            return;
        }

        // Type de licence
        $licenseType = select(
            'Quel type de licence FontAwesome utilisez-vous ?',
            [
                'free' => 'Free (gratuite)',
                'pro' => 'Pro (payante)',
            ],
            default: 'free'
        );

        // Chemins de scan personnalis√©s (utilise le trait)
        $customPaths = $this->configureScanPaths();

        // Fichiers √† exclure (utilise le trait)
        $excludePatterns = $this->configureExcludePatterns();

        // G√©n√©ration de rapports
        $generateReports = confirm('G√©n√©rer automatiquement des rapports ?', true);

        // Sauvegardes
        $enableBackups = confirm('Cr√©er des sauvegardes avant modification ?', true);

        // √âcrire la configuration
        $this->writeConfiguration(
            $licenseType,
            $customPaths,
            $generateReports,
            $enableBackups,
            $excludePatterns
        );

        info('‚úÖ Configuration personnalis√©e sauvegard√©e');
    }

    /**
     * Configurer le stockage pour les rapports web
     */
    protected function setupStorage(): void
    {
        info('üîó Configuration du stockage pour l\'interface web...');

        // V√©rifier si le lien symbolique existe
        $storageLink = public_path('storage');

        if (! File::exists($storageLink)) {
            if ($this->option('non-interactive') || confirm('Cr√©er le lien symbolique storage pour l\'acc√®s web ?', true)) {
                spin(
                    fn () => Artisan::call('storage:link'),
                    'Cr√©ation du lien symbolique...'
                );
                info('‚úÖ Lien symbolique storage cr√©√©');
            } else {
                warning('‚ö†Ô∏è  Sans le lien storage, les rapports ne seront pas accessibles via le web');
            }
        } else {
            info('‚úÖ Lien symbolique storage d√©j√† configur√©');
        }

        // Cr√©er le r√©pertoire des rapports
        $reportPath = storage_path('app/public/fontawesome-migrator/reports');

        if (! File::exists($reportPath)) {
            spin(
                fn () => File::makeDirectory($reportPath, 0755, true),
                'Cr√©ation du r√©pertoire des rapports...'
            );
            info('‚úÖ R√©pertoire des rapports cr√©√©');
        } else {
            info('‚úÖ R√©pertoire des rapports existe d√©j√†');
        }
    }

    /**
     * V√©rifier l'installation
     */
    protected function verifyInstallation(): void
    {
        info('üîç V√©rification de l\'installation...');

        $checks = [
            'Configuration' => File::exists(config_path('fontawesome-migrator.php')),
            'Lien storage' => File::exists(public_path('storage')),
            'R√©pertoire rapports' => File::exists(storage_path('app/public/fontawesome-migrator/reports')),
        ];

        $results = [];

        foreach ($checks as $check => $passed) {
            $results[] = ($passed ? '‚úÖ' : '‚ùå').' '.$check;
        }

        note(implode("\n", $results));

        if (\in_array(false, $checks, true)) {
            warning('Certaines v√©rifications ont √©chou√©');
        } else {
            info('‚úÖ Installation v√©rifi√©e avec succ√®s');
        }
    }

    // Configuration methods moved to ConfigurationHelpers trait

    /**
     * Afficher l'√©cran de fin
     */
    protected function displayCompletion(): void
    {
        outro('üéâ Installation termin√©e avec succ√®s !');

        note(
            "üìã Prochaines √©tapes :\n\n".
            "1Ô∏è‚É£  Tester la migration :\n".
            "    php artisan fontawesome:migrate --dry-run\n\n".
            "2Ô∏è‚É£  Effectuer la migration :\n".
            "    php artisan fontawesome:migrate\n\n".
            "3Ô∏è‚É£  Acc√©der aux rapports :\n".
            '    '.url('/fontawesome-migrator/reports')
        );

        note(
            "üìñ Documentation compl√®te :\n".
            "  ‚Ä¢ README.md du package\n".
            "  ‚Ä¢ config/fontawesome-migrator.php\n\n".
            "üÜò Support :\n".
            "  ‚Ä¢ php artisan fontawesome:migrate --help\n".
            '  ‚Ä¢ GitHub Issues pour les probl√®mes'
        );
    }

    /**
     * Ex√©cuter une √©tape avec gestion d'erreur
     */
    protected function step(string $title, callable $callback): void
    {
        try {
            spin($callback, 'üîß '.$title);
        } catch (Exception $exception) {
            error('‚ùå Erreur: '.$exception->getMessage());
            warning('Vous pouvez r√©essayer avec --force si n√©cessaire');
        }
    }

    // Scan paths and exclusion patterns methods moved to ConfigurationHelpers trait
}
